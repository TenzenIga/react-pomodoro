{"version":3,"sources":["components/rangeInput.js","components/sidebar.js","components/button.js","components/screen.js","App.js","serviceWorker.js","index.js","assets/tuturu_1.mp3"],"names":["RangeInput","props","react_default","a","createElement","className","title","type","min","max","value","time","step","name","onChange","handleInput","Sidebar","handleWorktime","workTime","handleBreaktime","breakTime","Button","button","isOn","onClick","reset","start","Screen","dist_default","percentage","text","concat","minutes","seconds","strokeWidth","styles","root","path","stroke","strokeLinecap","transition","trail","fill","fontSize","background","score","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","audio","Audio","tuturu","getSeconds","state","slice","getMinutes","Math","floor","playSound","playVar","play","then","catch","error","console","log","status","bind","assertThisInitialized","countPercentage","_this2","_this$state","timer","setInterval","setState","clearInterval","e","target","sidebar","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.cd4ebf95.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function RangeInput(props) {\r\n  return (\r\n    <div className=\"slider_container\">\r\n      <p>{props.title}</p>\r\n      <input\r\n        type=\"range\"\r\n        min={props.min}\r\n        max={props.max}\r\n        value={props.time}\r\n        step=\"1\"\r\n        name={props.name}\r\n        className=\"slider\"\r\n        onChange={props.handleInput}\r\n      />\r\n      <p>{props.time} minutes</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Rangeinput from \"./rangeInput\";\r\nconst Sidebar = props => {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <Rangeinput\r\n        title=\"Work time\"\r\n        handleInput={props.handleWorktime}\r\n        min={1}\r\n        max={90}\r\n        name=\"workTime\"\r\n        time={props.workTime}\r\n      />\r\n      <Rangeinput\r\n        title=\"Break time\"\r\n        handleInput={props.handleBreaktime}\r\n        min={1}\r\n        max={25}\r\n        name=\"breakTime\"\r\n        time={props.breakTime}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\n\r\nexport default function Button(props) {\r\n  let button;\r\n  if (props.isOn) {\r\n    button = (\r\n      <button className=\"screen_btn on\" onClick={props.reset}>\r\n        Reset\r\n      </button>\r\n    );\r\n  } else {\r\n    button = (\r\n      <button className=\"screen_btn\" onClick={props.start}>\r\n        Start\r\n      </button>\r\n    );\r\n  }\r\n\r\n  return <div>{button}</div>;\r\n}\r\n","import React from \"react\";\r\nimport Button from \"./button\";\r\nimport CircularProgressbar from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\n\r\nexport default function Screen(props) {\r\n  return (\r\n    <div className=\"screen\">\r\n      <div className=\"wrapper\">\r\n        <CircularProgressbar\r\n          className=\"screen_circle\"\r\n          percentage={props.percentage}\r\n          text={`${props.minutes}:${props.seconds}`}\r\n          strokeWidth={5}\r\n          styles={{\r\n            // Customize the root svg element\r\n            root: {},\r\n            // Customize the path, i.e. the \"completed progress\"\r\n            path: {\r\n              // Path color\r\n              stroke: \"#ff4500\",\r\n              // Whether to use rounded or flat corners on the ends - can use 'butt' or 'round'\r\n              strokeLinecap: \"butt\",\r\n              // Customize transition animation\r\n              transition: \"stroke-dashoffset 0.5s ease 0s\"\r\n            },\r\n            // Customize the circle behind the path, i.e. the \"total progress\"\r\n            trail: {\r\n              // Trail color\r\n              stroke: \"#fff\"\r\n            },\r\n            // Customize the text\r\n            text: {\r\n              // Text color\r\n              fill: \"#fff\",\r\n              // Text size\r\n              fontSize: \"16px\"\r\n            },\r\n            // Customize background - only used when the `background` prop is true\r\n            background: {\r\n              fill: \"#3e98c7\"\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <Button start={props.start} reset={props.reset} isOn={props.isOn} />\r\n      <div className=\"screen_score\">Score:{props.score}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport Sidebar from \"./components/sidebar\";\nimport Screen from \"./components/screen\";\nimport \"./App.css\";\nimport tuturu from \"./assets/tuturu_1.mp3\";\n\nconst defaultTime = 60;\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      workTime: 1,\n      breakTime: 5,\n      seconds: 60,\n      score: 0,\n      isOn: false,\n      status: \"work\",\n      percentage: 0\n    };\n\n    this.start = this.start.bind(this);\n    this.reset = this.reset.bind(this);\n    this.countPercentage = this.countPercentage.bind(this);\n    this.handleBreaktime = this.handleBreaktime.bind(this);\n    this.handleWorktime = this.handleWorktime.bind(this);\n  }\n  audio = new Audio(tuturu);\n\n  /* tick(){\n    if(this.state.seconds === 0 && this.state.status === 'break'){\n      clearInterval()\n    }else if(this.state.seconds === 0 && this.state.status === 'work'){\n      clearInterval()\n    }else{\n      this.setState({\n       seconds:this.state.seconds - 1,\n       percentage: 0\n      })\n    }\n  }\n*/\n\n  start() {\n    const { breakTime, workTime, status } = this.state;\n    switch (status) {\n      case \"break\":\n        this.timer = setInterval(\n          () =>\n            this.setState({\n              seconds: this.state.seconds - 1,\n              percentage:\n                this.state.score % 3 === 0\n                  ? this.state.percentage - this.countPercentage(breakTime * 3)\n                  : this.state.percentage - this.countPercentage(breakTime)\n            }),\n          1000\n        );\n\n        break;\n      default:\n        this.timer = setInterval(\n          () =>\n            this.setState({\n              seconds: this.state.seconds - 1,\n              percentage: this.state.percentage + this.countPercentage(workTime)\n            }),\n          1000\n        );\n        this.setState({\n          score: this.state.score + 1\n        });\n        break;\n    }\n\n    this.setState({\n      isOn: true\n    });\n  }\n\n  countPercentage(time) {\n    return 100 / (time * 60);\n  }\n  reset() {\n    clearInterval(this.timer);\n    this.setState({\n      seconds: this.state.workTime * 60,\n      isOn: false,\n      status: \"work\",\n      percentage: 0\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.state.seconds === 0) {\n      clearInterval(this.timer);\n      this.playSound();\n      if (this.state.status === \"work\") {\n        this.setState({\n          status: \"break\",\n          seconds:\n            this.state.score % 3 === 0\n              ? this.state.breakTime * 60 * 3\n              : this.state.breakTime * 60,\n          isOn: false\n        });\n      } else {\n        this.setState({\n          status: \"work\",\n          seconds: this.state.workTime * 60,\n          isOn: false\n        });\n      }\n    }\n  }\n\n  getSeconds = () => {\n    return `0${this.state.seconds % 60}`.slice(-2);\n  };\n\n  getMinutes = () => {\n    return Math.floor(this.state.seconds / 60);\n  };\n\n  handleWorktime(e) {\n    const { value } = e.target;\n    if (!this.state.isOn) {\n      this.setState({\n        workTime: value,\n        seconds: value * 60,\n        percentage: 0,\n        status: \"work\",\n        score: 0\n      });\n    }\n  }\n\n  handleBreaktime(e) {\n    const { value } = e.target;\n    if (!this.state.isOn) {\n      this.setState({\n        breakTime: value,\n        percentage: 0,\n        seconds: this.state.workTime * 60,\n        score: 0,\n        status: \"work\"\n      });\n    }\n  }\n  playSound = () => {\n    let playVar = this.audio.play();\n    if (playVar !== \"undefined\") {\n      playVar\n        .then(function() {})\n        .catch(function(error) {\n          console.log(error);\n        });\n    }\n  };\n  render() {\n    const { workTime } = this.state;\n    return (\n      <div className=\"app\">\n        <Sidebar\n          handleInput={this.handleInput}\n          workTime={this.state.workTime}\n          breakTime={this.state.breakTime}\n          handleBreaktime={this.handleBreaktime}\n          handleWorktime={this.handleWorktime}\n        />\n\n        <Screen\n          percentage={this.state.percentage}\n          minutes={this.getMinutes()}\n          seconds={this.getSeconds()}\n          start={this.start}\n          reset={this.reset}\n          status={this.state.status}\n          isOn={this.state.isOn}\n          score={this.state.score}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/tuturu_1.54d79b64.mp3\";"],"sourceRoot":""}